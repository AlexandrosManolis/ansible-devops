---
- hosts: all

  pre_tasks:

    - name: Install Java
      apt:
          name: openjdk-21-jdk
          state: present
          update_cache: yes
      become: yes

  tasks:
      - name: Find my public ip
        uri:
          url: http://ifconfig.me/ip
          return_content: yes
        register: ip_response
      
      - name: Replace db_ip in host_vars/gcloud-app-server.yaml
        delegate_to: localhost
        lineinfile:
          path: "{{playbook_dir | dirname}}/group_vars/appservers.yaml"
          state: present
          regexp: '^(\s*)backend_server_url:.*'
          line:  'backend_server_url: "http://{{ip_response.content}}:80" #backend_vm ip'
      
      - name: Reload appservers variables
        include_vars:
          file: "{{ playbook_dir | dirname }}/group_vars/appservers.yaml"

      - name: "debug appdir"
        ansible.builtin.debug:
          msg: "appdir {{ansible_user_dir}}"

      - name: "Clone the Spring repository"
        git:
            repo: "https://github.com/AlexandrosManolis/farmerCompensation.git"
            dest: "{{ appdir }}"
            version: "{{ branch }}"
            force: yes
      
      - name: Replace db_ip in host_vars/gcloud-app-server.yaml
        delegate_to: localhost
        lineinfile:
          path: "{{playbook_dir | dirname}}/host_vars/gcloud-app-server.yaml"
          state: present
          regexp: '^(\s*)spring.datasource.url:.*'
          line:  "    spring.datasource.url: jdbc:postgresql://{{ db_ip }}:5432/farmers"
        vars:
          db_ip: "{{ lookup('pipe', \"grep -A3 'Host database-azure' ~/.ssh/config | grep Hostname | awk '{print $2}'\") }}"
      
      - name: Reload app.env variables
        include_vars:
          file: "{{ playbook_dir | dirname }}/host_vars/gcloud-app-server.yaml"

      - name: "Populate application.properties"
        lineinfile:
          dest: "{{ appdir }}/src/main/resources/application.properties"
          state: present
          regexp: "^{{item.key}}="
          line: "{{item.key}}={{item.value}}"
        with_items:
          - "{{app.env | dict2items}}"

      - name: "Build the Spring application"
        command: "./mvnw package -Dmaven.test.skip "
        args:
            chdir: "{{ appdir }}"

      - name: copy spring service file
        template:
          src: ../files/spring.service.j2
          dest: "/etc/systemd/system/spring.service"
        become: yes
        become_user: root
        notify: restart spring

      - name: reload spring service
        service:
          name: spring
          state: restarted
        become: yes

      - name: ensure spring service started
        service:
          name: spring
          state: started
          enabled: yes
        become: yes

      - name: "APT - install nginx"
        apt:
          name: nginx
          update_cache: yes
        become: yes

      - name: copy nginx conf file
        template:
          src: ../files/nginx.http.j2
          dest: "/etc/nginx/sites-available/spring"
        become: yes

      - name: enable spring site in nginx
        file:
          src: "/etc/nginx/sites-available/spring"
          dest: "/etc/nginx/sites-enabled/spring"
          state: link
        become: yes
        notify: restart nginx

      - name: de-activate default nginx site
        file:
          path: /etc/nginx/sites-enabled/default
          state: absent
        become: yes
        notify: restart nginx

  handlers:
  
  - name: restart spring
    service:
      name: spring
      state: restarted
    become: yes

  - name: restart nginx
    service:
      name: nginx
      state: restarted
    become: yes